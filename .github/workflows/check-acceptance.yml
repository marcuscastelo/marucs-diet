name: Check Acceptance Criteria

on:
  pull_request:
    types: [opened, edited, reopened, synchronize]

permissions:
  pull-requests: write
  issues: read

jobs:
  check-criteria:
    runs-on: ubuntu-latest

    steps:
      - name: Extract referenced issues
        id: extract
        run: |
          echo "${{ github.event.pull_request.body }}" > pr_body.txt
          grep -Eo '([Cc]loses|[Ff]ixes|[Rr]esolves) +#([0-9]+)' pr_body.txt | \
            grep -Eo '#[0-9]+' | tr -d '#' | uniq > issues.txt || true

      - name: Check checkboxes and manage PR comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          failed=0
          unchecked_list=""

          check_unchecked() {
            content="$1"
            src="$2"
            matches=$(echo "$content" | grep -n '\[ \]' || true)
            if [ -n "$matches" ]; then
              failed=1
              unchecked_list="$unchecked_list\n**$src**:\n\`\`\`\n$matches\n\`\`\`"
            fi
          }

          # PR body
          pr_body=$(cat pr_body.txt)
          check_unchecked "$pr_body" "PR Body"

          # PR comments (ignorar coment√°rio do bot)
          pr_comments=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
            "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments")
          echo "$pr_comments" | jq -r '.[] | @base64' | while read encoded; do
            comment=$(echo "$encoded" | base64 --decode | jq -r '.body')
            if echo "$comment" | grep -q '<!-- criteria-check -->'; then
              continue
            fi
            check_unchecked "$comment" "PR Comment"
          done

          # Issues
          if [ -s issues.txt ]; then
            while read issue_number; do
              issue=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/issues/$issue_number")
              issue_body=$(echo "$issue" | jq -r '.body')
              check_unchecked "$issue_body" "Issue #$issue_number Body"

              issue_comments=$(curl -s -H "Authorization: Bearer $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/issues/$issue_number/comments")
              echo "$issue_comments" | jq -r '.[] | @base64' | while read encoded; do
                comment=$(echo "$encoded" | base64 --decode | jq -r '.body')
                if echo "$comment" | grep -q '<!-- criteria-check -->'; then
                  continue
                fi
                check_unchecked "$comment" "Issue #$issue_number Comment"
              done
            done < issues.txt
          fi

          # Gerenciar coment√°rio do bot
          existing_comment_id=$(echo "$pr_comments" | jq -r '.[] | select(.body | contains("<!-- criteria-check -->")) | .id')
          if [ "$failed" -eq 1 ]; then
            msg="üö´ **O PR cont√©m crit√©rios de aceita√ß√£o n√£o marcados**.\n$unchecked_list\n\n<!-- criteria-check -->"
            if [ -n "$existing_comment_id" ]; then
              echo "üîÑ Atualizando coment√°rio existente..."
              curl -s -X PATCH -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -d "$(jq -nc --arg body "$msg" '{body: $body}')" \
                "https://api.github.com/repos/$REPO/issues/comments/$existing_comment_id" > /dev/null
            else
              echo "üí¨ Criando coment√°rio..."
              curl -s -X POST -H "Authorization: Bearer $GH_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -d "$(jq -nc --arg body "$msg" '{body: $body}')" \
                "https://api.github.com/repos/$REPO/issues/$PR_NUMBER/comments" > /dev/null
            fi
            exit 1
          else
            if [ -n "$existing_comment_id" ]; then
              echo "üßπ Limpando coment√°rio antigo..."
              curl -s -X DELETE -H "Authorization: Bearer $GH_TOKEN" \
                "https://api.github.com/repos/$REPO/issues/comments/$existing_comment_id" > /dev/null
            fi
            echo "‚úÖ Todos os crit√©rios foram marcados."
          fi
