{
  "editor.tabSize": 2,
  "editor.detectIndentation": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "always",
  },
  "eslint.validate": [
    "typescript",
    "typescriptreact",
    "javascript",
    "javascriptreact"
  ],
  // "chat.editing.autoAcceptDelay": 100,
  // "chat.extensionTools.enabled": true,
  // "chat.commandCenter.enabled": true,
  // "chat.instructionsFilesLocations": {
  //   ".github/instructions": true,
  //   "/Users/vscode/repos/instructions": true
  // },
  // "chat.mcp.discovery.enabled": true,
  // "chat.edits2.enabled": true,
  // "inlineChat.enableV2": true,
  // "chat.agent.maxRequests": 200,
  // "github.copilot.chat.agent.runTasks": true,
  // "github.copilot.chat.agent.thinkingTool": true,
  // "github.copilot.chat.languageContext.typescript.enabled": true,
  // "github.copilot.chat.languageContext.inline.typescript.enabled": true,
  // "github.copilot.chat.summarizeAgentConversationHistory.enabled": true,
  // "github.copilot.chat.edits.temporalContext.enabled": true,
  // "github.copilot.chat.followUps": "always",
  // "github.copilot.chat.generateTests.codeLens": true,
  // "github.copilot.chat.search.keywordSuggestions": true,
  // "github.copilot.chat.terminalChatLocation": "terminal",
  // "github.copilot.advanced": {
  //   "useLanguageServer": true,
  // },
  // "github.copilot.chat.codeGeneration.useInstructionFiles": true,
  "github.copilot.chat.codeGeneration.instructions": [
    {
      "file": "docs/COPILOT_SHORT_GUIDE.md"
    }
  ],
  // "github.copilot.chat.testGeneration.instructions": [
  //   {
  //     "file": "docs/COPILOT_TESTS_GUIDE.md"
  //   }
  // ],
  // "github.copilot.chat.reviewSelection.enabled": true,
  // "github.copilot.chat.reviewSelection.instructions": [
  //   {
  //     "file": ".copilot-review-instructions.md"
  //   }
  // ],
  // "github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
  //   {
  //     "file": ".copilot-pull-request-description-instructions.md"
  //   }
  // ],
  "github.copilot.chat.commitMessageGeneration.instructions": [
    {
      "text": " We follow the [Conventional Commits](https://www.conventionalcommits.org/) standard, with an extension for more specific types:\n\n| Type       | When to use                                                        |\n|------------|--------------------------------------------------------------------|\n| `feat`     | New feature or endpoint                                            |\n| `fix`      | Bug fixes                                                         |\n| `refactor` | Internal refactoring without behavior change                      |\n| `style`    | Changes that do not affect behavior (spaces, formatting)           |\n| `docs`     | Documentation changes                                              |\n| `test`     | Adding or modifying tests                                          |\n| `build`    | Changes to the build process (Makefile, Dockerfile, etc)           |\n| `ci`       | Changes to pipelines, GitHub Actions, etc                          |\n| `chore`    | Dependency updates, configs, administrative tasks                  |\n| `revert`   | Reverting a previous commit                                       |\n\n### Example:\n\nfeat(api): add endpoint for user creation\nfix(auth): fix JWT token expiration\nrefactor(service): move retry logic to middleware\nchore(deps): update Go to 1.22\ndocs: update README with build instructions. ALL COMMITS MUST BE IN TECHNICAL ENGLISH, BRIEF BUT DO NOT OMIT ANY MODIFICATION."
    }
  ],
}