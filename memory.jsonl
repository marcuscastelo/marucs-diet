{"type":"entity","entityType":"user","name":"marcuscastelo","observations":["User identified as marcuscastelo for this session.","Session on June 27, 2025: User requested to migrate Recipe entity and all related flows from legacy Item[] to UnifiedItem[] in-memory, while maintaining Item[] (food only) for database compatibility. Migration included auditing, refactoring, conversion utilities, persistence adaptation, test updates, and documentation.","UnifiedRecipe and NewUnifiedRecipe types and Zod schemas were added. Factory functions and conversion utilities between UnifiedRecipe <-> Recipe and UnifiedItem[] <-> Item[] were created.","UnifiedRecipeRepository and supabaseUnifiedRecipeRepository were created for infrastructure conversion. unifiedRecipe application service was added.","UI migration: UnifiedRecipeEditView, UnifiedRecipeEditContext, GroupChildrenEditor, and UnifiedItemName were migrated to use UnifiedRecipe natively or in hybrid mode.","Attempted to use mcp_memory_add_observations for session logging; error due to missing entity, so entity creation was proposed and now completed.","System prompt for agent memory management was reviewed and confirmed as a guide for using the memory tool.","Pending: (Optional/future) migrate remaining UI components and search integration to UnifiedRecipe, enhance system with performance optimizations, runtime validation, developer documentation, and automate memory/observation logging for user/agent interactions.","marcuscastelo led the 4-phase migration for Item/ItemGroup unification: schema/domain, infrastructure, application, and UI.","All phases were tracked via issues #882 (epic), #883 (schema/domain), #887 (infra), #884 (app), #885 (UI), and PR #908 (UI migration in progress).","Migration strategy included: feature flags, comprehensive testing, rollback plans, and performance monitoring.","UnifiedItem type introduced: recursive reference for food, recipe, group; enables recursive recipes and eliminates semantic contradictions.","Each phase included detailed acceptance criteria, risk mitigation, and documentation updates.","PR #908 implements a canary strategy for UI migration, incremental adoption, and maintains backward compatibility.","Comprehensive regression test checklist in PR #908 covers all phases, with >95% test coverage and validation of all critical workflows, performance, and architecture compliance.","The .github/prompts/pull-request.prompt.md defines the workflow for reviewing, pushing, and creating pull requests from HEAD to the nearest rc/** branch, with user confirmation and detailed PR metadata requirements.","The agent must output PR title, description, labels, and milestone in specific formats, confirm with the user, and use heredoc with single quotes for multi-line PR bodies/messages to avoid formatting issues.","If no rc/** branch is found, the agent must prompt the user for the correct base branch or fail gracefully.","The agent must check for unpushed commits, push them, and confirm all PR details before creation. After PR creation, the agent must report the PR URL and handle any formatting issues by rewriting the PR body using heredoc and updating on GitHub.","The workflow prioritizes code and application logic changes in PR summaries, with documentation/prompt changes as secondary. All results must be in English, and the agent must not duplicate PRs if one already exists.","The agent must document regression testing and feature comparison steps for critical feature logic changes in the PR checklist.","The agent must always use labels and milestones that already exist in the repository unless explicitly instructed otherwise.","PR implementation details: UnifiedItem UI migration, macro calculation refactor, and console interception features.","UnifiedItemView and supporting components were added for hierarchical item display and editing. Macro calculation utilities were refactored to support UnifiedItem recursively, replacing legacy Item/ItemGroup logic.","Environment config was updated to support ENABLE_UNIFIED_ITEM_STRUCTURE as a boolean, defaulting to false, for feature flag control.","Console interception utilities and tests were added for debugging and export/sharing of logs.","All legacy Item/ItemGroup UI and logic were removed or replaced with UnifiedItem-based implementations. Macro overflow logic and tests were updated for UnifiedItem compatibility.","All changes are covered by comprehensive tests and maintain backward compatibility via feature flag.","Previously, PR implementation details were saved under the user entity instead of a dedicated PR entity. This was incorrect. From now on, each PR will have its own entity for implementation details, and all such process improvements or corrections will be recorded in memory."]}
{"type":"entity","entityType":"epic","name":"Item/ItemGroup Unification for Recursive Recipes","observations":["Unify Item and ItemGroup entities into a single hierarchical structure to support recursive recipes and eliminate semantic contradictions.","Strategic goals: prepare for recursive recipes, eliminate semantic contradictions, reduce technical debt, simplify architecture.","Proposed solution: UnifiedItem type with recursive reference supporting food, recipe, and group.","Success criteria: single entity supports all behaviors, recursive recipes via config, no breaking changes, performance maintained, 100% test coverage.","Risk mitigation: feature flags, comprehensive testing, rollback plan, performance monitoring."]}
{"type":"entity","entityType":"phase","name":"#883 Phase 1: Schema & Domain Layer","observations":["Refactor domain and schema layers to unify Item and ItemGroup into UnifiedItem.","Scope: domain logic, schema definitions, migration utilities, macro calculation, hierarchy utilities, conversion utilities, unit and performance tests.","Motivation: eliminate contradictions, technical debt, enable recursive recipes, simplify architecture.","Acceptance: UnifiedItem schema, new domain ops, migration utilities, feature flag, 100% test coverage, performance, docs.","Dependencies: current Item/ItemGroup schemas, MacroNutrients schema, existing domain ops."]}
{"type":"entity","entityType":"phase","name":"#887 Phase 2: Infrastructure Layer","observations":["Refactor infrastructure layer for unified Item/ItemGroup structure: DB schema, repos, migration utilities, rollback, query optimization, validation, backup/restore, monitoring.","Motivation: enable recursive recipes, eliminate technical debt, enable future app/UI migrations.","Acceptance: unified schema, data migration, queries work, performance, rollback, tests, migration scripts, benchmarks, docs.","Dependencies: Phase 1 (domain), blocks Phase 3 (app), Phase 4 (UI)."]}
{"type":"entity","entityType":"phase","name":"#884 Phase 3: Application Layer","observations":["Refactor application layer services and business logic for unified Item/ItemGroup structure.","Scope: app services for diet/meal/day-diet, business logic, CRUD, aggregation, traversal, event handlers, controllers, utilities, tests.","Motivation: leverage unified model, eliminate technical debt, enable recursive recipes, ensure maintainability, enable future UI/API changes.","Acceptance: all app services use UnifiedItem, legacy logic removed/wrapped, CRUD/aggregation/traversal updated, tests, no breaking changes, performance, docs.","Dependencies: Phase 1 (domain), Phase 2 (infra), blocks Phase 4 (UI)."]}
{"type":"entity","entityType":"phase","name":"#885 Phase 4: UI Migration","observations":["Refactor and migrate all UI components, modals, and user interactions to support unified Item/ItemGroup structure.","Scope: all UI components, modals, forms, dialogs, state management, CRUD, aggregation, traversal, remove/adapt legacy UI logic, update tests.","Motivation: leverage unified model, eliminate technical debt, enable recursive recipes, ensure maintainability, enable future enhancements.","Acceptance: all UI uses UnifiedItem, legacy UI logic removed/adapted, CRUD/aggregation/traversal updated, tests, no breaking changes, performance, docs.","Dependencies: Phase 1 (domain), Phase 2 (infra), Phase 3 (app)."]}
{"type":"entity","entityType":"pull_request","name":"PR #908","observations":["Implements UnifiedItem UI migration, macro calculation refactor, and console interception features.","Adds UnifiedItemView and supporting components for hierarchical item display and editing.","Refactors macro calculation utilities to support UnifiedItem recursively, replacing legacy Item/ItemGroup logic.","Updates environment config to support ENABLE_UNIFIED_ITEM_STRUCTURE as a boolean, defaulting to false, for feature flag control.","Adds console interception utilities and tests for debugging and export/sharing of logs.","Removes or replaces all legacy Item/ItemGroup UI and logic with UnifiedItem-based implementations. Updates macro overflow logic and tests for UnifiedItem compatibility.","All changes are covered by comprehensive tests and maintain backward compatibility via feature flag."]}
{"type":"entity","entityType":"governance_rule","name":"memory_governance_rules","observations":["All new memory observations related to project phases must be prefixed by the corresponding epic number.","Example: 'EPIC-123 Phase 1: Schema & Domain Layer'"]}
{"type":"relation","from":"#883 Phase 1: Schema & Domain Layer","relationType":"part of","to":"Item/ItemGroup Unification for Recursive Recipes"}
{"type":"relation","from":"#887 Phase 2: Infrastructure Layer","relationType":"part of","to":"Item/ItemGroup Unification for Recursive Recipes"}
{"type":"relation","from":"#884 Phase 3: Application Layer","relationType":"part of","to":"Item/ItemGroup Unification for Recursive Recipes"}
{"type":"relation","from":"#885 Phase 4: UI Migration","relationType":"part of","to":"Item/ItemGroup Unification for Recursive Recipes"}
{"type":"relation","from":"#887 Phase 2: Infrastructure Layer","relationType":"depends on","to":"#883 Phase 1: Schema & Domain Layer"}
{"type":"relation","from":"#884 Phase 3: Application Layer","relationType":"depends on","to":"#887 Phase 2: Infrastructure Layer"}
{"type":"relation","from":"#885 Phase 4: UI Migration","relationType":"depends on","to":"#884 Phase 3: Application Layer"}
{"type":"relation","from":"PR #908","relationType":"implements","to":"#885 Phase 4: UI Migration"}
{"type":"relation","from":"PR #908","relationType":"closes","to":"#885"}
{"type":"relation","from":"marcuscastelo","relationType":"governed_by","to":"memory_governance_rules"}